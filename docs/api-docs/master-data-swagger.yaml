openapi: 3.0.0

info:
  title: Master Data
  description: Personal Master Data API.
  version: 0.1.0
  contact:
    name: Adam Korzeniak
    email: korzeniak.adam@gmail.com
    url: https://www.adamkorzeniak.pl

servers:
  - description: Stage/Test Server
    url: https://adamkorzeniak.pl:8443/v0

tags:
  - name: User
    description: User details management - Register and get details about user
  - name: Movie
    description: Movie details management - Search, get, create, update, delete movie details
  - name: Error
    description: Error details management - Search, create, delete error details
paths:

  /User/me:
    get:
      tags:
        - User
      summary: Retrieves details of authenticated user
      operationId: getMe
      description: Retrieves details of user whose credentials were passed in request
      responses:
        '200':
          $ref: '#/components/responses/userDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

  /User/register:
    post:
      tags:
        - User
      summary: Registers an user
      operationId: registerUser
      description: Registers an user with provided details
      requestBody:
        $ref: '#/components/requestBodies/userRegistrationDetails'
      responses:
        '200':
          $ref: '#/components/responses/userRegisteredDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalError'


  /Movie/movies:
    get:
      tags:
        - Movie
      summary: Searches movies
      operationId: searchMovies
      description: Searches for movies using search parameters
      parameters:
        - in: query
          name: genres
          description: 'Pass a comma-limited list of values. Each of those values must be contained by name of at least one genre of movie. So for "com,ram" com is contained in Comedy and ram is contained in Drama.'
          required: false
          schema:
            type: string
            example: omedy,dram
        - in: query
          name: match-title
          description: title of the movie
          required: false
          schema:
            type: string
            example: Pulp Fiction
        - in: query
          name: search-title
          description: movie title has to contain that value
          required: false
          schema:
            type: string
            example: back to the
        - in: query
          name: search-description
          description: movie description has to contain that value
          required: false
          schema:
            type: string
            example: love story
        - in: query
          name: search-review
          description: movie review has to contain that value
          required: false
          schema:
            type: string
            example: good
        - in: query
          name: search-plotSummary
          description: movie plot summary has to contain that value
          required: false
          schema:
            type: string
            example: kiss
        - in: query
          name: min-year
          description: movie year minimum value
          required: false
          schema:
            type: integer
            format: int32
            example: 2000
        - in: query
          name: max-year
          description: movie year maximum value
          required: false
          schema:
            type: integer
            format: int32
            example: 2000
        - in: query
          name: min-duration
          description: movie duration (in minutes) minimum value
          required: false
          schema:
            type: integer
            format: int32
            example: 100
        - in: query
          name: max-duration
          description: movie duration (in minutes) maximum value
          required: false
          schema:
            type: integer
            format: int32
            example: 100
        - in: query
          name: min-rating
          description: movie rating minimum value
          required: false
          schema:
            type: integer
            format: int32
            example: 6
        - in: query
          name: max-rating
          description: movie rating maximum value
          required: false
          schema:
            type: integer
            format: int32
            example: 6
        - in: query
          name: min-watchPriority
          description: movie watch priority minimum value
          required: false
          schema:
            type: integer
            format: int32
            example: 4
        - in: query
          name: max-watchPriority
          description: movie watch priority maximum value
          required: false
          schema:
            type: integer
            format: int32
            example: 4
        - in: query
          name: exist-rating
          description: is movie rated
          required: false
          schema:
            type: boolean
            example: true
        - in: query
          name: exist-watchPriority
          description: does movie have watch priority set
          required: false
          schema:
            type: boolean
            example: true
        - in: query
          name: exist-review
          description: does movie have review
          required: false
          schema:
            type: boolean
            example: true
        - in: query
          name: exist-plotSummary
          description: does movie have plot summary
          required: false
          schema:
            type: boolean
            example: true
        - in: query
          name: order
          description: order movies in default order using provided field
          required: false
          schema:
            type: string
            example: title
            enum: [
              title,
              year,
              duration,
              rating,
              watchPriority
            ]
        - in: query
          name: order-asc
          description: order movies in ascending order using provided field
          required: false
          schema:
            type: string
            example: title
            enum: [
              title,
              year,
              duration,
              rating,
              watchPriority
            ]
        - in: query
          name: order-desc
          description: order movies in descending order using provided field
          required: false
          schema:
            type: string
            example: title
            enum: [
              title,
              year,
              duration,
              rating,
              watchPriority
            ]
      responses:
        '200':
          $ref: '#/components/responses/moviesDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'
    post:
      tags:
        - Movie
      summary: Adds a movie
      description: Creates a movie with provided details
      operationId: addMovie
      requestBody:
        $ref: '#/components/requestBodies/movieRequestDetails'
      responses:
        '201':
          $ref: '#/components/responses/movieDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

  /Movie/movies/{movieId}:
    get:
      tags:
        - Movie
      summary: Retrieves a movie for given id
      operationId: getMovie
      description: Retrieves a movie for given id
      parameters:
        - name: movieId
          in: path
          required: true
          description: Return movie with specific id
          schema:
            type: integer
            example: 42
      responses:
        '200':
          $ref: '#/components/responses/movieDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

    put:
      tags:
        - Movie
      summary: Updates a movie
      operationId: updateMovie
      description: Updates a movie with provided details
      parameters:
        - name: movieId
          in: path
          required: true
          description: Return movie with specific id
          schema:
            type: integer
            example: 42
      requestBody:
        $ref: '#/components/requestBodies/movieRequestDetails'
      responses:
        '200':
          $ref: '#/components/responses/movieDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'
    delete:
      tags:
        - Movie
      summary: Deletes a movie
      operationId: deleteMovie
      description: Deletes a movie with given id
      parameters:
        - name: movieId
          in: path
          required: true
          description: movie id
          schema:
            type: integer
            example: 42
      responses:
        '204':
          $ref: '#/components/responses/movieRemoved'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

  /Movie/genres:
    get:
      tags:
        - Movie
      summary: Searches genres
      operationId: searchGenres
      description: Searches for genres using search parameters
      parameters:
        - in: query
          name: match-name
          description: name of the genre
          required: false
          schema:
            type: string
            example: Comedy
        - in: query
          name: search-name
          description: genre name has to contain that value
          required: false
          schema:
            type: string
            example: drama
        - in: query
          name: exist-name
          description: genre name exists
          required: false
          schema:
            type: boolean
            example: true
        - in: query
          name: order
          description: order genres in default order using provided field
          required: false
          schema:
            type: string
            example: name
            enum: [
              name
            ]
        - in: query
          name: order-asc
          description: order genres in ascending order using provided field
          required: false
          schema:
            type: string
            example: name
            enum: [
              name
            ]
        - in: query
          name: order-desc
          description: order genres in descending order using provided field
          required: false
          schema:
            type: string
            example: name
            enum: [
              name
            ]
      responses:
        '200':
          $ref: '#/components/responses/genresDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'
    post:
      tags:
        - Movie
      summary: Adds a genre
      operationId: addGenre
      description: Creates a genre with provided details
      requestBody:
        $ref: '#/components/requestBodies/genreRequestDetails'
      responses:
        '201':
          $ref: '#/components/responses/genreDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

  /Movie/genres/{genreId}:
    get:
      tags:
        - Movie
      summary: Retrieves a genre for given id
      operationId: getGenre
      description: Retrieves a genre for given id
      parameters:
        - name: genreId
          in: path
          required: true
          description: Return a genre with specific id
          schema:
            type: integer
            example: 42
      responses:
        '200':
          $ref: '#/components/responses/genreDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

    put:
      tags:
        - Movie
      summary: Updates a genre
      operationId: updateGenre
      description: Updates a genre with provided details
      parameters:
        - name: genreId
          in: path
          required: true
          description: Return genre with specific id
          schema:
            type: integer
            example: 42
      requestBody:
        $ref: '#/components/requestBodies/genreRequestDetails'
      responses:
        '200':
          $ref: '#/components/responses/genreDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'
    delete:
      tags:
        - Movie
      summary: Deletes a genre
      operationId: deleteGenre
      description: Deletes a genre with given id
      parameters:
        - name: genreId
          in: path
          required: true
          description: genre id
          schema:
            type: integer
            example: 42
      responses:
        '204':
          $ref: '#/components/responses/genreRemoved'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

    # patch:
    #   tags:
    #     - Movie
    #   description: Merge genres
    #   operationId: mergeGenres
    #   parameters:
    #     - name: genreId
    #       in: path
    #       required: true
    #       description: genre id to be merged to other genre
    #       schema:
    #         type: integer
    #         example: 42
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Genre'
    #   responses:
    #     200:
    #       description: Genres merge result
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Genre'
    #     400:
    #       $ref: '#/components/responses/badRequest'
    #     401:
    #       $ref: '#/components/responses/unauthorized'
    #     404:
    #       $ref: '#/components/responses/notFound'
    #     405:
    #       $ref: '#/components/responses/methodNotAllowed'
    #     500:
    #       $ref: '#/components/responses/internalError'

  /Error/errors:
    get:
      tags:
        - Error
      summary: Searches errors
      operationId: searchErrors
      description: Search for errors using search parameters
      parameters:
        - in: query
          name: match-errorId
          description: errorId of the error
          required: false
          schema:
            type: string
            example: error-1234
        - in: query
          name: match-appId
          description: appId of the error
          required: false
          schema:
            type: string
            example: app-1234
        - in: query
          name: match-name
          description: name of the error
          required: false
          schema:
            type: string
            example: Client issue
        - in: query
          name: search-errorId
          description: error errorId has to contain that value
          required: false
          schema:
            type: string
            example: 1234
        - in: query
          name: search-appId
          description: error appId has to contain that value
          required: false
          schema:
            type: string
            example: 1234
        - in: query
          name: search-name
          description: error name has to contain that value
          required: false
          schema:
            type: string
            example: client
        - in: query
          name: search-details
          description: error details has to contain that value
          required: false
          schema:
            type: string
            example: client
        - in: query
          name: search-status
          description: error status has to contain that value
          required: false
          schema:
            type: string
            example: client
        - in: query
          name: search-location
          description: error location has to contain that value
          required: false
          schema:
            type: string
            example: client
        - in: query
          name: min-time
          description: error epoch time minimum value
          required: false
          schema:
            type: integer
            format: int64
            example: 1541111111
        - in: query
          name: max-time
          description: error epoch time maximum value
          required: false
          schema:
            type: integer
            format: int64
            example: 1541111111
        - in: query
          name: exist-details
          description: error details exists
          required: false
          schema:
            type: boolean
            example: true
        - in: query
          name: order
          description: order errors in default order using provided field
          required: false
          schema:
            type: string
            example: time
            enum: [
              errorId,
              appId,
              name,
              time
            ]
        - in: query
          name: order-asc
          description: order errors in ascending order using provided field
          required: false
          schema:
            type: string
            example: time
            enum: [
              errorId,
              appId,
              name,
              time
            ]
        - in: query
          name: order-desc
          description: order errors in descending order using provided field
          required: false
          schema:
            type: string
            example: time
            enum: [
              errorId,
              appId,
              name,
              time
            ]
      responses:
        '200':
          $ref: '#/components/responses/errorsDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'
    post:
      tags:
        - Error
      summary: Adds an error
      operationId: addError
      description: Creates an error with provided details
      requestBody:
        $ref: '#/components/requestBodies/errorDetails'
      responses:
        '201':
          $ref: '#/components/responses/errorDetails'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'

  /Error/errors/{errorId}:
    delete:
      tags:
        - Error
      summary: Deletes an error
      operationId: deleteError
      description: Deletes an error with given id
      parameters:
        - name: errorId
          in: path
          required: true
          description: error id
          schema:
            type: integer
            example: 42
      responses:
        '204':
          $ref: '#/components/responses/errorRemoved'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalError'


security:
  - basicAuth: []

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: 'For Stage environment use below credentials:<br>Username: <b>test</b><br>Password: <b>test123</b><br><br>'
  schemas:
    User:
      type: object
      description: Represents User Entity
      required:
        - username
        - password
      properties:
        id:
          description: User Id
          type: integer
          format: int64
          example: 11
          readOnly: true
        username:
          description: User username
          type: string
          example: adam
          minLength: 1
        password:
          description: User password
          type: string
          example: Pa5$w0rd
          minLength: 1
          writeOnly: true
        role:
          description: User role
          type: string
          example: USER
          enum:
            - USER
            - ADMIN
    Movie:
      type: object
      required:
        - title
        - year
        - duration
      properties:
        id:
          description: Movie Id
          type: integer
          format: int64
          example: 987
          readOnly: true
        title:
          type: string
          example: Titanic
        year:
          type: integer
          format: int32
          example: 1997
          minimum: 1800
          maximum: 2999
        duration:
          type: integer
          format: int32
          example: 194
          minimum: 0
          maximum: 1000
        description:
          type: string
          example: Great movie
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        rating:
          type: integer
          format: int32
          example: 8
          minimum: 0
          maximum: 10
        watchPriority:
          type: integer
          format: int32
          example: 0
          minimum: 0
          maximum: 5
        review:
          type: string
          example: Titanic
        plotSummary:
          type: string
          example: Women lives 100 years, man dies before his 18 ;)
        reviewDate:
          type: string
          format: yyyy-mm-dd
          example: '2019-02-03'
    MovieList:
      type: array
      items:
        $ref: '#/components/schemas/Movie'
    Genre:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 789
          readOnly: true
        name:
          type: string
          minLength: 1
          example: Drama
    GenreList:
      type: array
      items:
        $ref: '#/components/schemas/Genre'
    Error:
      type: object
      required:
        - id
        - errorId
        - appId
      properties:
        id:
          type: integer
          format: int64
          example: 987
        errorId:
          type: string
          example: error-1234
        appId:
          type: string
          example: app-1234
        name:
          type: string
          example: client issue
        details:
          type: string
          example: unexpected client error
        status:
          type: string
          example: status
        url:
          type: string
          example: Movies/-1
        stack:
          type: string
          example: stack trace
        time:
          type: integer
          format: int64
          example: 1541111111
    ErrorList:
      type: array
      items:
        $ref: '#/components/schemas/Error'
    ErrorResponse:
      type: object
      properties:
        code:
          description: error code
          type: string
          example: REQ001
        title:
          description: error title
          type: string
          example: BAD REQUEST
        message:
          description: error message
          type: string
          example: Missing field title

  examples:
    BadRequestErrorResponse:
      value:
        code: BAD_REQUEST
        title: Bad Request
        message: Bad Request
    NotAuthorizedErrorResponse:
      value:
        code: NOT_AUTHORIZED
        title: Not Authorized
        message: Not Authorized
    NotFoundErrorResponse:
      value:
        code: NOT_Found
        title: Not Found
        message: Not Found
    MethodNotAllowedErrorResponse:
      value:
        code: METHOD_NOT_ALLOWED
        title: Not Found
        message: Not Found
    ConflictErrorResponse:
      value:
        code: Conflict
        title: Not Found
        message: Not Found
    InternalErrorResponse:
      value:
        code: INTERNAL_ERROR
        title: Not Found
        message: Not Found

  requestBodies:
    userRegistrationDetails:
      description: User details
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    movieRequestDetails:
      description: Movie details
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Movie'
    genreRequestDetails:
      description: Genre details
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Genre'
    errorDetails:
      description: Error details
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  responses:
    userDetails:
      description: User details returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    movieDetails:
      description: Created movie details returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Movie'
    moviesDetails:
      description: List of movies returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MovieList'
    movieRemoved:
      description: Movie removed
    genreDetails:
      description: Genre details returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Genre'
    genresDetails:
      description: List of genres returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenreList'
    genreRemoved:
      description: Genre removed
    errorsDetails:
      description: List of errors returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    errorDetails:
      description: Created error details returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    errorRemoved:
      description: Error removed
    userRegisteredDetails:
      description: Registered user details returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    badRequest:
      description: The request could not be understood by the server due to malformed syntax
      content:
        application/json:
          example:
            $ref: '#/components/examples/BadRequestErrorResponse'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    unauthorized:
      description: User is not authorised
      content:
        application/json:
          example:
            $ref: '#/components/examples/NotAuthorizedErrorResponse'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notFound:
      description: Server could not found requested resource
      content:
        application/json:
          example:
            $ref: '#/components/examples/NotFoundErrorResponse'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    methodNotAllowed:
      description: Method is not supported for given resource
      content:
        application/json:
          example:
            $ref: '#/components/examples/MethodNotAllowedErrorResponse'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    conflict:
      description: Data to be created already exists.
      content:
        application/json:
          example:
            $ref: '#/components/examples/ConflictErrorResponse'
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    internalError:
      description: The server encountered an unexpected condition which prevented it from fulfilling the request.
      content:
        application/json:
          example:
            $ref: '#/components/examples/InternalErrorResponse'
          schema:
            $ref: '#/components/schemas/ErrorResponse'